version: "3.9"

# services:
#   app:
#     image: ${DOCKER_USER}/actions_test:${IMAGE_TAG:-stable}
#     restart: always
#     init: true
#     environment:
#       - APP_ENV=prod
#       - APP_VERSION=${APP_VERSION:-unknown}
#       - PORT=5000
#       - GUNICORN_WORKERS=${GUNICORN_WORKERS:-2}
#       - GUNICORN_TIMEOUT=${GUNICORN_TIMEOUT:-30}

#     # Dockerfile의 HEALTHCHECK 사용 → compose 쪽 healthcheck 제거
#     # expose는 내부 통신용이라 선택사항(nginx가 서비스명으로 접근 가능)
#     # expose:
#     #   - "5000"
#     stop_grace_period: 20s
#     logging:
#       driver: json-file
#       options:
#         max-size: "10m"
#         max-file: "3"
#     # 보안(선택)
#     # read_only: true
#     # tmpfs:
#     #   - /tmp

#   nginx:
#     image: nginx:alpine
#     depends_on:
#       app:
#         condition: service_healthy
#     ports:
#       - "80:80"
#     volumes:
#       - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
#     restart: always
#     init: true
#     stop_grace_period: 10s
#     logging:
#       driver: json-file
#       options:
#         max-size: "10m"
#         max-file: "3"

services:
  app:
    image: ${DOCKER_USER}/actions_test:${IMAGE_TAG:-stable}
    restart: always
    environment:
      - APP_ENV=prod
      - APP_VERSION=${APP_VERSION:-unknown}
    expose:
      - "5000"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:5000/health || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 10

  nginx:
    image: nginx:alpine
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    restart: always